from Base import all
import Database.Data.Table
import Database.Data.SQL

type Connection

    ## UNSTABLE

       A Database connection.

       Allows to access tables from a database.
    type Connection internal_connection

    ## UNSTABLE

       SQL dialect that the database associated with that connection is using.
    dialect : String
    dialect = this.internal_connection.dialect

    ## UNSTABLE

       Accesses a table within the database, returning an object that can be
       used to create queries for that table.

       Arguments:
       - name: name of the table to access
    access_table : Text -> Table
    access_table name =
        column_names = this.internal_connection.fetch_column_names name
        Table.make_table this name column_names

    explain_query_plan : SQL.Statement -> Text
    explain_query_plan statement =
        _ = statement
        Error.throw "TODO"

    ## PRIVATE
    prepare_statement : Text | SQL.Statement -> PreparedStatement
    prepare_statement statement = case statement of
        Text -> this.internal_connection.prepare_statement statement []
        SQL.Statement _ ->
            compiled = statement.prepare
            this.internal_connection.prepare_statement compiled.first compiled.second

    ## ADVANCED
    execute_query : Text | SQL.Statement -> ResultSet =
    execute_query statement =
        prep_stmt = this.prepare_statement statement
        java_rs = prep_stmt.executeQuery
        Error.throw "TODO wrapping result set"

    ## ADVANCED
    execute_update : Text | SQL.Statement -> Integer
    execute_update statement =
        prep_stmt = this.prepare_statement statement
        # TODO we may want to use executeLargeUpdate but it seems to not be implemented by default (checked that it does throw)
        # we may try every time to call large update and if it fails, fall back to normal update
        prep_stmt.executeUpdate

## PRIVATE
make_fake_connection dialect tables =
    Connection (FakeTestConnection.new tables dialect)
