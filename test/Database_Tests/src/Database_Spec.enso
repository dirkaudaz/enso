from Base import all
from Database import all
from Database.Connection.Connection import Sql_Error
import Test

spec connection =
    connection.execute_update "CREATE TABLE T1 (A INT, B INT, C INT);"
    connection.execute_update "INSERT INTO T1 (A,B,C) VALUES (1,2,3);"
    connection.execute_update "INSERT INTO T1 (A,B,C) VALUES (4,5,6);"
    # TODO add values
    t1 = connection.access_table "T1"
    Test.group "Basic Table Access" <|
        Test.specify "should allow to materialize tables and columns into local memory" <|
            df = t1.to_dataframe
            a = t1.at 'A' . to_dataframe
            df.at 'A' . to_vector . should_equal [1, 4]
            a.to_vector . should_equal [1, 4]
        Test.specify "should allow to materialize columns directly into a Vector" <|
            v = t1.at 'A' . to_vector
            v . should_equal [1, 4]
        Test.specify "should preserve indexes when materializing tables"
            # TODO add multi indexes when implemented
            df = t1.set_index 'A' . to_dataframe
            df.at 'B' . to_vector . should_equal [2, 5]
            df.columns.map .name . should_equal ['B', 'C']
            ix = df.index
            ix.name . should_equal 'A'
            ix.to_vector . should_equal [1, 4]
        Test.specify "should preserve indexes when materializing columns"
            # TODO add multi indexes when implemented
            df = t1.set_index 'A' . at 'B' . to_dataframe
            df.to_vector . should_equal [2, 5]
            ix = df.index
            ix.name . should_equal 'A'
            ix.to_vector . should_equal [1, 4]

sqlite_specific_spec connection =
    Test.group "Error Handling" <|
        Test.specify "should wrap errors" <|
            connection.execute_query "foobar" . should_fail_with Sql_Error
            connection.execute_update "foobar" . should_fail_with Sql_Error

            action = connection.execute_query "SELECT A FROM undefined_table"
            action . should_fail_with Sql_Error
            action.catch.to_text . should_equal "[SQLITE_ERROR] SQL error or missing database (no such table: undefined_table)"

sqlite_spec =
    file = File.new "target/sqlite_test.db"
    file.delete_if_exists
    connection = Database.open_sqlite_file file
    here.spec connection
    here.sqlite_specific_spec connection
    file.delete

postgres_spec =
    # TODO use env vars to read tmp DB config
    IO.println "PostgreSQL test database is not configured, skipping."
    Nothing
